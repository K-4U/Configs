" All system-wide defaults are set in $VIMRUNTIME/debian.vim (usually just
" /usr/share/vim/vimcurrent/debian.vim) and sourced by the call to :runtime
" you can find below.  If you wish to change any of those settings, you should
" do it in this file (/etc/vim/vimrc), since debian.vim will be overwritten
" everytime an upgrade of the vim packages is performed.  It is recommended to
" make changes after sourcing debian.vim since it alters the value of the
" 'compatible' option.

" This line should not be removed as it ensures that various options are
" properly set to work with the Vim-related packages available in Debian.
"runtime! debian.vim

" Uncomment the next line to make Vim more Vi-compatible
" NOTE: debian.vim sets 'nocompatible'.  Setting 'compatible' changes numerous
" options, so any other options should be set AFTER setting 'compatible'.

" Vim5 and later versions support syntax highlighting. Uncommenting the next
" line enables syntax highlighting by default.
if has("syntax")
  syntax on
endif

" If using a dark background within the editing area and syntax highlighting
" turn on this option as well
"set background=dark
" Syntax highlighting
set t_Co=256 " 256 color term
set background=dark
syntax on
"color koehler
set number ruler
"color zenburn
let g:molokai_original = 2
color molokai
hi ColorColumn ctermbg=lightgrey guibg=lightgrey


" General
set nocompatible " With vi
filetype plugin indent on
set autochdir " Change into file's dir.
set fileformats=unix,dos,mac " Support all, prefer unix
set hidden 
"
set nobackup
set nowritebackup
set noswapfile
"set backup " Backup files
"set backupdir=~/.vim/backup
"set directory=~/.vim/tmp " Swap files
"
"set textwidth=80 " 80 chars per line
"set colorcolumn=+1 " 80 char mark
"set linebreak " Break lines after 80 chars at logical points
set wrap " And otherwise always
set number " Line numbers
set numberwidth=5 " 99999 lines max
set showmatch " Matching braces
set cursorline
" Uncomment the following to have Vim jump to the last position when
" reopening a file
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

" Uncomment the following to have Vim load indentation rules and plugins
" according to the detected filetype.
if has("autocmd")
  filetype plugin indent on
endif

" The following are commented out as they cause vim to behave a lot
" differently from regular Vi. They are highly recommended though.
"set showcmd		" Show (partial) command in status line.
"set showmatch		" Show matching brackets.
"set ignorecase		" Do case insensitive matching
"set smartcase		" Do smart case matching
"set incsearch		" Incremental search
"set autowrite		" Automatically save before commands like :next and :make
"set hidden             " Hide buffers when they are abandoned
"set mouse=a		" Enable mouse usage (all modes)
"For templates:
if has("autocmd")
 autocmd bufnewfile *.c so /home/koen/.vim/templates/c_header
 autocmd bufnewfile *.c exe "1," . 8 . "g/File Name:.*/s//File Name: " .expand("%")
 autocmd bufnewfile *.c exe "1," . 8 . "g/Creation Date:.*/s//Creation Date: " .strftime("%d-%m-%Y")
 autocmd Bufwritepre,filewritepre *.c execute "normal ma"
 autocmd Bufwritepre,filewritepre *.c exe "1," . 8 . "g/Last Modified:.*/s/Last Modified:.*/Last Modified : " .strftime("%c")
 autocmd bufwritepost,filewritepost *.c execute "normal `a"
endif


set smarttab
set expandtab
set autoindent
set smartindent
set backspace=2
set tabstop=4
set softtabstop=4
set shiftwidth=4

" Smart home
map <khome> <home>
nmap <khome> <home>
inoremap <silent> <home> <C-O>:call Home()<CR>
nnoremap <silent> <home> :call Home()<CR>
function! Home()
        let curcol = wincol()
        normal ^
        let newcol = wincol()
        if newcol == curcol
             normal 0
        endif
endfunction

map <F3> :tabp<cr>
map <F4> :tabn<cr>
map <F5> <esc>:TlistToggle<cr>
map <C-S> <esc>:w<cr>
map <F6> <Plug>TaskList
filetype plugin on
autocmd FileType python set omnifunc=pythoncomplete#Complete
imap <C-BS> <C-W>

let g:miniBufExplMapWindowNavVim = 1
let g:miniBufExplMapWindowNavArrows = 1
let g:miniBufExplMapCTabSwitchBufs = 1
let g:miniBufExplModSelTarget = 1

" For the doxygen:
let g:DoxygenToolkit_authorName="K-4U" 


" This is for highlighting 80+chars
highlight OverLength ctermbg=52 ctermfg=white guibg=#610B0B
match OverLength /\%81v.\+/


" Source a global configuration file if available
if filereadable("/etc/vim/vimrc.local")
  source /etc/vim/vimrc.local
endif

